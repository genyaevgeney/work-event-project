В этой статье будет описано процесс создания веб приложения LiveJournal, в котором можно будет создавать, редактировать, просматривать и удалять статьи.

Серверная часть приложения использует Php  и веб-фреймворк Laravel. Клиентская часть скноструирована на JavaScript фреймворке Vue.js. Для написания кода использовался текстовый редактор Sublime Text 3.

В самом начале создания любого приложения нужно подготовить рабочую среду. После этого можно приступать к разработке.

Сначала нужно создать базу данных приложения. Следующим шагом будет создание проекта Laravel, установка всех зависимости командой: composer install и также генерация ключа для проекта с помощью команды: php artisan key:generate. Теперь нужно добавить в проект .env файл, в котором хранятся все необходимые переменные среды. Следуя примеру в виде файла .env.example, здесь нужно ввести данные, необходимые для подключения к базе данных проекта и также указать url адрес веб-приложения.

В проекте будут использоваться контроллеры ресурсов. Для начала необходимо создать такой контроллер с помощью команды: php artisan make:controller ArticleController --resource и зарегистрировать ресурсный маршрут к контроллеру в файле api.php который находится в папке routes !!рис 1!!

Для создания удобной и легко масштабированной архитектуры необходимо будет создать еще 2 слоя приложения. Первый будет использоваться для работы с бизнес логикой, второй - для работы с базой данных.

Теперь новый контроллер необходимо связать со слоем сервиса.

Всего в контроллере будет 5 методов:
- метод store для создания статьи !!рис 4!!
- метод show для пагинации статей !!рис 5!!
- метод edit для получения данных нужной статьи !!рис 6!!
- метод update для редактирования статьи !!рис 7!!
- метод destroy для удаления статьи !!рис 8!!

!! код файла !!

Всех импортов кроме Request пока еще нет в проекте, но в дальнейшем они будут созданы. StoreNews будет необходим для валидации данных при создании статьи, а UpdateNews при ее редактировании. ArticleService является сервисом статьи в котором будет обрабатываться бизнес логика. ArticleResource необходим для преобразования модели в JSON. Используя паттерн Dependency Injection было связано слой сервиса с текущим контроллером.

Далее необходимо создать StoreNews request  с помощью команды: php artisan make:request StoreNews и написать правила валидации !!рис 9!!. Так само нужно создать файл UpdateNews и его правила должны быть такими !!рис 10!!. Так же нужно создать ресурс командой: php artisan make:resource ArticleResource и изменить его метод toArray !!рис 11!!

Следующим шагом будет создание сервисов. Необходимо в папке app создать папку Services. В этой папке будет находиться AbstractInterface.php файл. Это будет интерфейс, который описывает основные методы сервисного класса !!рис 12!! Создадим тут также AbstractService.php файл, в котором будет класс реализующий абстрактный интерфейс. У этого класса будет 2 свойства, которые нужны для работы с репозиториями проекта и указания количество записей на странице пагинации. !!код файла AbstractService.php!!. Потом в папке сервисов нужно создать папку Article, где будут храниться следующие файлы:
- ArticleInterface.php !!код файла ArticleInterface.php!!. 
- сервис статьи ArticleService.php !!код файла ArticleService.php!!

После создания сервисов в папке app создадим папку Repositories, здесь должна находиться папка Article, структура для репозиториев будет такая же как у сервисов. В этой папке будет 2 файла:
- файл AbstractInterface.php !!код файла AbstractInterface.php!! 
- файл AbstractRepository.php !!код файла AbstractRepository.php!!
Потом нужно создать папку Article, которая также будет содержать в себе 2 файла:
- файл ArticleInterface.php !!код файла ArticleInterface.php!! 
- файл ArticleRepository.php !!код файла ArticleRepository.php!! 

В AbstractRepository.php сохранение статьи в базу данных происходит с помощью Laravel Job. Для этого нужно создать Job командой: php artisan make:job SaveArticle и написать в нем требуемый функционал !!код файла SaveArticle.php!!.

Далее создадим модель Article в папке app/Models !!код файла Article.php!!

Теперь для работы с базой данных нужны миграции:
- миграцию create_articles_table командой: php artisan make:migration create_articles_table !!код файла create_articles_table!!
- миграцию create_jobs_table командой: php artisan queue:table

Для заполнения базы данных также нужно создать сиды. В сидах будет использоваться фабрика статей, поэтому сначала нужно создать ArticleFactory командой: php artisan make:factory ArticleFactory !!код файла ArticleFactory.php!!. После этого нужно создать seeder командой: php artisan make:seeder DatabaseSeeder и в нем использовать фабрику ArticleFactory !!код файла DatabaseSeeder!!

На этом этапе основная часть бекенда приложения уже готова.

Теперь нужно установить Vue Cli и создать папку фронтенда командой vue create client. При создании нужно выбрать стандартные настройки. Если при разработке будут появляться предупреждения связанные с eslint то их можно временно отключить с помощью файла .eslintignore в корне фронтенда. В этом проекте будет использоваться роутер vue-router, axios для отправки запросов на сервер, vue-i18n для создания мультиязычности и vuex для создания хранилища. Нужно установить эти плагины командой: npm install vue-router axios vue-i18n vuex.

Сначала нужно перейти в папку src. Изменим файл main.js под требования проекта !! код файла !!

Создадим хранилище. Для этого нужно создать папку store и в ней сделать файл index.js !! код файла !!
В хранилище клиента будет храниться список языков сайта.

Для мультиязычности нужно создать папку lang. В этой папке будет находится файл index.js !! код файла !!. Также тут нужно еще создать папку translations в которой будут еще 2 файла:
- en.json !! код файла !!  
- ru.json !! код файла !!
В этих файлах будут находиться переводы слов.

Далее создадим папку router, в которой будет файл index.js !! код файла !!. Здесь будет настроен роутинг мультиязычного сайта.

Теперь осталось создать сами страницы сайта, разбив их на компоненты. Нужно перейти по маршруту src/components. В этой папке будут находиться такие файлы:
 - компонент RouterView.vue !!код файла!! . Он нужен для правильного функционирования роутера. 
- компонент Header.vue, который будет шапкой сайта, в нем так же можно будет менять язык сайта !!код файла!!. 
- компонент Error.vue для отображения страницы ошибки при неверном маршруте !!код файла!!. 
- компонент Homepage.vue, который будет домашней страницей сайта, так же в нем используется сторонняя библиотека vue-videobg для удобного отображения ведиозаписи на странице !! код файла !!
- компонент ArticleSection.vue, который будет формой для редактирования и создания статей !! код файла !! Компонент предоставляет возможность удобно создавать и редактировать статьи
- компонент PaginationMenu.vue, отображающий удобную навигацию по страницам пагинации !! код файла !!
- компонент Article.vue, который будет статьей с возможностью удаления и перехода на страницу редактирования !! код файла !!
- компонент Dashboard.vue !! код файла !!. Он будет страницей, которая содержит в себе ранее созданные компоненты и отображает все статьи проекта с помощью пагинации 
- компонент EditPage.vue, который будет страницей редактирования статьи !! код файла !!
Стили компонентов находятся в отдельных файлах и подключаются внутри компонентов. Стили и остальные медиа ресурсы можно посмотреть в репозитории проекта. 
Также нужно создать .env файл внутри корня фронтенда и добавить туда переменную VUE_APP_BASE_URL которая будет содержать в себе URL сайта

Теперь нужно настроить проект на работу с только что созданным фронтендом, сбилдить фронтенд и удалить все лишние файлы. После этого проект будет полностью функционировать.

Осталось сделать тесты для тестирования контроллера. Для этого нужно настроить подключение к базе данных для тестов в файле phpunit.xml. Потом создать тест командой: php artisan make:test ControllerTest. Тест будет проверять функционирование контроллера проекта !! код файла !!

На этом этапе проект полностью готов. За это время было создано веб-приложение для размещения и управления статьями на сайте с использованием возможностей laravel и vue.js.
